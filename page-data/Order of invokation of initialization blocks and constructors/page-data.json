{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Order of invokation of initialization blocks and constructors","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"order-of-invokation-of-initialization-blocks-and-constructors\"\n  }, \"Order of invokation of initialization blocks and constructors\"), mdx(\"p\", null, \"Parent static block\\nChild static block\\nParent initialization  block\\nParent Constructor\\nChild initialization block\\nChild Constructor\"), mdx(\"p\", null, \"\\uD83D\\uDC46\\uD83C\\uDFFD output of the code below\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class Parent {    \\n    public Parent() {\\n        System.out.println(\\\"Parent Constructor\\\");\\n    }    \\n    static {\\n        System.out.println(\\\"Parent static block\\\");    \\n    }    \\n    {\\n        System.out.println(\\\"Parent initialisation  block\\\");\\n    }\\n}\\n\\npublic class Child extends Parent {    \\n    {\\n        System.out.println(\\\"Child initialisation block\\\");\\n    }\\n    static {\\n        System.out.println(\\\"Child static block\\\");\\n    }\\n\\n    public Child() {\\n        System.out.println(\\\"Child Constructor\\\");\\n    }    \\n    public static void main(String[] args) {\\n        new Child();    \\n    }\\n}\\n\")), mdx(\"p\", null, \"Initialization blocks get invoked in the order they're written in the code.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/19561332/in-what-order-do-static-blocks-and-initialization-blocks-execute-when-using-inhe\"\n  }, \"In what order do static blocks and initialization blocks execute when using inheritance? - Stack Overflow\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/order-execution-initialization-blocks-constructors-java/#:~:text=Initialization%20blocks%20run%20in%20the,above%20the%20constructors%20within%20braces.\"\n  }, \"Order of execution of Initialization blocks and Constructors in Java\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"static-blocks\"\n  }, \"Static Blocks\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An unnamed block in a class prefixed by the static keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Invokation\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Invoked once at the beginning of the program (when the class is loaded in the memory).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Invoked before constructor\")))), mdx(\"p\", null, \"For details, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Order-of-invokation-of-initialization-blocks-and-constructors\",\n    \"title\": \"Order of invokation of initialization blocks and constructors\"\n  }, \"[[Order of invokation of initialization blocks and constructors]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"94965360-3efa-5232-a716-1a27f8b87bb3","fields":{"slug":"/Static Blocks","title":"Static Blocks"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"instance-initializer-block\"\n  }, \"Instance Initializer Block\"), mdx(\"p\", null, \"Instance initialisation block can be included in a class. Its simply a block with no name and is called whenever an instance is initialised.\"), mdx(\"h2\", {\n    \"id\": \"order-of-invokation\"\n  }, \"Order of invokation\"), mdx(\"p\", null, \"Here is the order in which it is invoked with respect to constructors.\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Constructor of parent class \\u2192 Constructor \\u2192 Instance initialisation block\")), mdx(\"p\", null, \"On surface, it looks like the initialisation block is executed first. But what happens is that the compiler copies the block in the constructor at the top. So the constructor is called within which the instance initialiser block runs.\"), mdx(\"p\", null, \"For more details, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Order-of-invokation-of-initialization-blocks-and-constructors\",\n    \"title\": \"Order of invokation of initialization blocks and constructors\"\n  }, \"[[Order of invokation of initialization blocks and constructors]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"d871e03b-8b52-56f2-8101-35703cd3f2eb","fields":{"slug":"/Instance Initializer Block","title":"Instance Initializer Block"}}}]},"fields":{"slug":"/Order of invokation of initialization blocks and constructors","title":"Order of invokation of initialization blocks and constructors"}}},"pageContext":{"id":"ac676b35-549f-5428-9f9c-a437575867d9"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}