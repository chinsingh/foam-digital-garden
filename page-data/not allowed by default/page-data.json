{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/not allowed by default","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"not-allowed-by-default\"\n  }, \"not allowed by default\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"clone\"\n  }, \"clone()\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"clone is a member function of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Object-class\",\n    \"title\": \"Object class\"\n  }, \"[[Object class]]\"), \" which throws an exception when used. Why?\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Cloning a class is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/not-allowed-by-default\",\n    \"title\": \"not allowed by default\"\n  }, \"[[not allowed by default]]\"), \" for security reasons. But if the class itself allows you i.e. the class implements \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Cloneable\",\n    \"title\": \"Cloneable\"\n  }, \"[[Cloneable]]\"), \" interface, then you can use clone() method.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"51153be2-8fdb-591e-987a-45cbde337b85","fields":{"slug":"/clone()","title":"clone()"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"serialization-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"/Serialization\",\n    \"title\": \"Serialization\"\n  }, \"[[Serialization]]\"), \" in Java\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/not-allowed-by-default\",\n    \"title\": \"not allowed by default\"\n  }, \"[[not allowed by default]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Serialization with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/inheritance\",\n    \"title\": \"inheritance\"\n  }, \"[[inheritance]]\"), \"\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  If parent is serializable, so is child.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Serialization with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Aggregation\",\n    \"title\": \"Aggregation\"\n  }, \"[[Aggregation]]\"), \"\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  If a serializable class has reference to another class, all references must be serializable\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SerialVersionUID\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Serialization process associates an ID with each serializable class on runtime \\u2192 SerialVersionID\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used to verify that sender and reciever of the serialized object are the same. Throws InvalidClassException otherwise.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can generate our own SerialVersionUID by creating a static final long serialVersionUID field in the class. Suggested to have it private and declare it in the class itself.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transient\"), \" keyword\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  If you don't want to serialize any data member of the class - that is, you don't want it to be stored - mark it (prefix it) with transient.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"573ae8e0-09e1-5220-89db-84787b4ebe87","fields":{"slug":"/Serialization in Java","title":"[[Serialization]] in Java"}}}]},"fields":{"slug":"/not allowed by default","title":"not allowed by default"}}},"pageContext":{"id":"af056845-6cb0-5e7c-8857-b85af8788377"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}