{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Program Execution in Java","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"program-execution-in-java\"\n  }, \"Program Execution in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loading classes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-loader\",\n    \"title\": \"Class loader\"\n  }, \"[[Class loader]]\"), \" loads the class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The constants, static components, method code etc. is loaded in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-(method)-area\",\n    \"title\": \"Class (method) area\"\n  }, \"[[Class (method) area]]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Program-Counter-Register\",\n    \"title\": \"Program Counter Register\"\n  }, \"[[Program Counter Register]]\"), \" is pointed to the first line\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Memory-Allocation-for-new-objects\",\n    \"title\": \"Memory Allocation for new objects\"\n  }, \"[[Memory Allocation for new objects]]\"), \" is done in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Heap-Space\",\n    \"title\": \"Heap Space\"\n  }, \"[[Heap Space]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"method-call-and-execution\"\n  }, \"Method Call and execution\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Private JVM Stack in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Stack-Memory\",\n    \"title\": \"Stack Memory\"\n  }, \"[[Stack Memory]]\"), \" is created\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Java-is-always-Pass-by-Value\",\n    \"title\": \"Java is always Pass by Value\"\n  }, \"[[Java is always Pass by Value]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"New frame is created and stored in the stack\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Frame destroyed when method invocation completes\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"A new one will be created again when the method is invoked.\\n\")))), mdx(\"h2\", {\n    \"id\": \"array-initialization\"\n  }, \"Array initialization\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Single-dimensional arrays\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  A contiguous space is allocated in heap and a reference is returned (similar to new object).\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"library/attachments/2022-07-29-16-00-30.png\",\n    \"alt\": \"array object in java\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Two-dimensional arrays\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They don't really exist.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2D arrays are just array of arrays.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multi-dimensional arrays go by the same rule.\")))), mdx(\"h2\", {\n    \"id\": \"string-memory-management\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/String-Memory-Management\",\n    \"title\": \"String Memory Management\"\n  }, \"[[String Memory Management]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"class-loader\"\n  }, \"Class loader\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not a type of memory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subsystem of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JVM\",\n    \"title\": \"JVM\"\n  }, \"[[JVM]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used to load class files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Responsible for three activities\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loading\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linking\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initialization\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"d2b98ce5-a3ba-5683-bff3-c478137f0df9","fields":{"slug":"/Class loader","title":"Class loader"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"class-method-area\"\n  }, \"Class (method) area\"), mdx(\"p\", null, \"Stores class level data of every class such as the runtime constant pool, field and method data, the code for methods.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"f4a7eebf-45ac-54f8-97b5-79506ded7434","fields":{"slug":"/Class (method) area","title":"Class (method) area"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"program-counter-register\"\n  }, \"Program Counter Register\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stores address of currently executing instruction.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also stores address of threads reponsible for executing current instruction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Size very small\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No effect of Java apps on PC register memory or its content\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"da91adee-cfac-5b2c-94af-8dd106a0bae0","fields":{"slug":"/Program Counter Register","title":"Program Counter Register"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"memory-allocation-for-new-objects\"\n  }, \"Memory Allocation for new objects\"), mdx(\"p\", null, \"Memory is allocated on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Heap-Space\",\n    \"title\": \"Heap Space\"\n  }, \"[[Heap Space]]\"), \" and a reference for that object is returned.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"ee05d894-dae2-5607-b922-afaa82491a5b","fields":{"slug":"/Memory Allocation for new objects","title":"Memory Allocation for new objects"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"heap-space\"\n  }, \"Heap Space\"), mdx(\"p\", null, \"Used to allocate memory to objects at run time\"), mdx(\"h2\", {\n    \"id\": \"how-is-object-stored-in-memory\"\n  }, \"How is object stored in memory?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The actual data/structure that is stored on the heap starts with what's commonly called\\xA0\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"object header\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Header contains \\u2014 a (compressed) class pointer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Class pointer \\u2014> an internal data structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Internal data structure \\u2014 defines layout of the class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layout of class \\u2014 stored in a separate memory area called Metaspace (or Compressed Class space if Compressed OOPs are used).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pointer can be 4 or 8 bytes, depending on the architecture - even on 64-bit systems, it's usually 4 bytes due to the\\xA0Compressed OOPs\\xA0optimization.\")), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/questions/61654407/how-references-are-stored-in-java\"\n  }, \"How references are stored in Java\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More about layout of java objects \\u2014 \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://shipilev.net/jvm/objects-inside-out/\"\n  }, \"Java Objects Inside Out\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.openjdk.java.net/display/HotSpot/CompressedOops\"\n  }, \"Compressed OOPs\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"e7c5768a-74f8-5c5a-8ae7-fcb382f9f43b","fields":{"slug":"/Heap Space","title":"Heap Space"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"stack-memory\"\n  }, \"Stack Memory\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Har thread ka ek stack. Har method ka ek stack frame.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each thread has a private JVM stack created at same time as thread\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used to store data and partial results which will be needed while returning value for method and performing dynamic linking\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stores \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Stack-Frame\",\n    \"title\": \"Stack Frame\"\n  }, \"[[Stack Frame]]\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"References to objects stored here\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"5fb6924f-21d1-5f68-bbe0-7b48d07fff75","fields":{"slug":"/Stack Memory","title":"Stack Memory"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"java-is-always-pass-by-value\"\n  }, \"Java is always Pass \", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"/by-Value\",\n    \"title\": \"by Value\"\n  }, \"[[by Value]]\"), \"\"), mdx(\"p\", null, \"Whenever a method is invoked in Java, it is allotted its own stack space. Regardless of the original variable type, each time a method is invoked, a copy for each argument is created in the stack memory and the copy version is passed to the method. Thus, always pass by value.\"), mdx(\"p\", null, \"For more details on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/How-Arguments-are-Passed-in-Java\",\n    \"title\": \"How Arguments are Passed in Java\"\n  }, \"[[How Arguments are Passed in Java]]\"), \" see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/How-Arguments-are-Passed-in-Java\",\n    \"title\": \"How Arguments are Passed in Java\"\n  }, \"[[How Arguments are Passed in Java]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"32773fa3-aead-5f76-9d4e-61799cf51ff1","fields":{"slug":"/Java is always Pass by Value","title":"Java is always Pass [[by Value]]"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"string-memory-management\"\n  }, \"String Memory Management\"), mdx(\"h2\", {\n    \"id\": \"string-initialization-using-literals\"\n  }, \"String Initialization using literals\"), mdx(\"p\", null, \"Creating a String literal \\u2192 JVM checks the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/String-Constant-Pool\",\n    \"title\": \"String Constant Pool\"\n  }, \"[[String Constant Pool]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exists => Points to the same 'literal'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't Exist => New instance created\")), mdx(\"h2\", {\n    \"id\": \"string-initialization-using-new\"\n  }, \"String Initialization using new\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String str = new String(); //null\\nString str = new String(\\\"Kya challa?\\\")\\n\")), mdx(\"p\", null, \"New object created irrespective of whether the literal already exists or not\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"2959ca6f-79ee-5c61-a830-f5637a84e373","fields":{"slug":"/String Memory Management","title":"String Memory Management"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"jvm\"\n  }, \"JVM\"), mdx(\"p\", null, \"JVM (Interpreter) is responsible to execute the program within JRE.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Program-Execution-in-Java\",\n    \"title\": \"Program Execution in Java\"\n  }, \"[[Program Execution in Java]]\"), \" happens here.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Thread-Scheduler\",\n    \"title\": \"Thread Scheduler\"\n  }, \"[[Thread Scheduler]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"d5be2990-7fdc-537d-bd33-04fd104580f8","fields":{"slug":"/JVM","title":"JVM"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"002-java-moc\"\n  }, \"002 Java MOC\"), mdx(\"h2\", {\n    \"id\": \"fundamentals\"\n  }, \"Fundamentals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic Syntax: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/HelloWorld-dot-java\",\n    \"title\": \"HelloWorld dot java\"\n  }, \"[[HelloWorld dot java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Syntax-Rules\",\n    \"title\": \"Java Syntax Rules\"\n  }, \"[[Java Syntax Rules]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Naming-Conventions\",\n    \"title\": \"Java Naming Conventions\"\n  }, \"[[Java Naming Conventions]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Suffixing-for-Non-default-Primitive-Data-Types\",\n    \"title\": \"Suffixing for Non-default Primitive Data Types\"\n  }, \"[[Suffixing for Non-default Primitive Data Types]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Prefixes-for-Different-Bases\",\n    \"title\": \"Prefixes for Different Bases\"\n  }, \"[[Prefixes for Different Bases]]\"), \" |\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Comments-in-Java\",\n    \"title\": \"Comments in Java\"\n  }, \"[[Comments in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[[public static void main(String[] args)]]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data Types: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Primitive-Data-Types-in-Java-and-their-sizes\",\n    \"title\": \"Primitive Data Types in Java and their sizes\"\n  }, \"[[Primitive Data Types in Java and their sizes]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Classes and Objects: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Creating-Objects-in-Java\",\n    \"title\": \"Creating Objects in Java\"\n  }, \"[[Creating Objects in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Using-the-Objects-(through-its-reference-variables)\",\n    \"title\": \"Using the Objects (through its reference variables)\"\n  }, \"[[Using the Objects (through its reference variables)]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Methods: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-is-always-Pass-by-Value\",\n    \"title\": \"Java is always Pass by Value\"\n  }, \"[[Java is always Pass by Value]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-types\"\n  }, \"Data Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Structured Types  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrays: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Defining-Arrays-in-Java\",\n    \"title\": \"Defining Arrays in Java\"\n  }, \"[[Defining Arrays in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Declaring-Arrays-in-Java\",\n    \"title\": \"Declaring Arrays in Java\"\n  }, \"[[Declaring Arrays in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Arrays-in-Java-are-Objects\",\n    \"title\": \"Arrays in Java are Objects\"\n  }, \"[[Arrays in Java are Objects]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String\",\n    \"title\": \"String\"\n  }, \"[[String]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/null-vs-empty-String\",\n    \"title\": \"null vs empty String\"\n  }, \"[[null vs empty String]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Comparison\",\n    \"title\": \"String Comparison\"\n  }, \"[[String Comparison]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Constant-Pool\",\n    \"title\": \"String Constant Pool\"\n  }, \"[[String Constant Pool]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Memory-Management\",\n    \"title\": \"String Memory Management\"\n  }, \"[[String Memory Management]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For mutable Strings: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/StringBuffer\",\n    \"title\": \"StringBuffer\"\n  }, \"[[StringBuffer]]\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/StringBuilder\",\n    \"title\": \"StringBuilder\"\n  }, \"[[StringBuilder]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Wrapper-Classes\",\n    \"title\": \"Wrapper Classes\"\n  }, \"[[Wrapper Classes]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Useful-Methods-of-Wrapper-Classes\",\n    \"title\": \"Useful Methods of Wrapper Classes\"\n  }, \"[[Useful Methods of Wrapper Classes]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Casting\",\n    \"title\": \"Casting\"\n  }, \"[[Casting]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Primitive-Conversion\",\n    \"title\": \"Primitive Conversion\"\n  }, \"[[Primitive Conversion]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Widening-Conversion-in-Java\",\n    \"title\": \"Widening Conversion in Java\"\n  }, \"[[Widening Conversion in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Narrowing-Conversion-in-Java\",\n    \"title\": \"Narrowing Conversion in Java\"\n  }, \"[[Narrowing Conversion in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Boxing-and-Unboxing-conversion\",\n    \"title\": \"Boxing and Unboxing conversion\"\n  }, \"[[Boxing and Unboxing conversion]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Conversion\",\n    \"title\": \"String Conversion\"\n  }, \"[[String Conversion]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Numeric-Promotion\",\n    \"title\": \"Numeric Promotion\"\n  }, \"[[Numeric Promotion]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Type-Conversion\",\n    \"title\": \"Object Type Conversion\"\n  }, \"[[Object Type Conversion]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Upcasting\",\n    \"title\": \"Upcasting\"\n  }, \"[[Upcasting]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Downcasting-in-Java\",\n    \"title\": \"Downcasting in Java\"\n  }, \"[[Downcasting in Java]]\"), \"\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Final\",\n    \"title\": \"Final\"\n  }, \"[[Final]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Final-Member\",\n    \"title\": \"Final Member\"\n  }, \"[[Final Member]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Blank-Final-Variable\",\n    \"title\": \"Blank Final Variable\"\n  }, \"[[Blank Final Variable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Blank-Static-Final-Variable\",\n    \"title\": \"Blank Static Final Variable\"\n  }, \"[[Blank Static Final Variable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Immutable-Class\",\n    \"title\": \"Immutable Class\"\n  }, \"[[Immutable Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums\",\n    \"title\": \"Java Enums\"\n  }, \"[[Java Enums]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Values-of-an-Enum-and-Constructor-of-Java-Enums\",\n    \"title\": \"Values of an Enum and Constructor of Java Enums\"\n  }, \"[[Values of an Enum and Constructor of Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/values()-valuesOf()-ordinal()-Functions-in-Java-Enums\",\n    \"title\": \"values(), valuesOf(), ordinal() Functions in Java Enums\"\n  }, \"[[values(), valuesOf(), ordinal() Functions in Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Internal-Code-Generated-by-Compiler-for-Java-Enums\",\n    \"title\": \"Internal Code Generated by Compiler for Java Enums\"\n  }, \"[[Internal Code Generated by Compiler for Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums-in-Switch-statement\",\n    \"title\": \"Java Enums in Switch statement\"\n  }, \"[[Java Enums in Switch statement]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums-and-Classes\",\n    \"title\": \"Java Enums and Classes\"\n  }, \"[[Java Enums and Classes]]\"), \"\")))), mdx(\"h2\", {\n    \"id\": \"oop-in-java\"\n  }, \"OOP in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inheritance-in-Java\",\n    \"title\": \"Inheritance in Java\"\n  }, \"[[Inheritance in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inheritance-in-Java-and-default\",\n    \"title\": \"Inheritance in Java and default\"\n  }, \"[[Inheritance in Java and default]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Multiple-Inheritance-not-allowed\",\n    \"title\": \"Multiple Inheritance not allowed\"\n  }, \"[[Multiple Inheritance not allowed]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Encapsulation\",\n    \"title\": \"Encapsulation\"\n  }, \"[[Encapsulation]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/default\",\n    \"title\": \"default\"\n  }, \"[[default]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Covariant-Return-Types\",\n    \"title\": \"Covariant Return Types\"\n  }, \"[[Covariant Return Types]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Static-in-Java\",\n    \"title\": \"Static in Java\"\n  }, \"[[Static in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Static-Blocks\",\n    \"title\": \"Static Blocks\"\n  }, \"[[Static Blocks]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inner-Class\",\n    \"title\": \"Inner Class\"\n  }, \"[[Inner Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Cloning-in-Java\",\n    \"title\": \"Object Cloning in Java\"\n  }, \"[[Object Cloning in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cloneable\",\n    \"title\": \"Cloneable\"\n  }, \"[[Cloneable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/clone()\",\n    \"title\": \"clone()\"\n  }, \"[[clone()]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Instance-Initializer-Block\",\n    \"title\": \"Instance Initializer Block\"\n  }, \"[[Instance Initializer Block]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-with-Method-Overriding\",\n    \"title\": \"Exception Handling with Method Overriding\"\n  }, \"[[Exception Handling with Method Overriding]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Serialization-in-Java\",\n    \"title\": \"Serialization in Java\"\n  }, \"[[Serialization in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Serializable\",\n    \"title\": \"Serializable\"\n  }, \"[[Serializable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/this-and-super-keyword\",\n    \"title\": \"this and super keyword\"\n  }, \"[[this and super keyword]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"special-classes-in-java\"\n  }, \"Special Classes in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Class\",\n    \"title\": \"Object Class\"\n  }, \"[[Object Class]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-of-Object-Class\",\n    \"title\": \"Methods of Object Class\"\n  }, \"[[Methods of Object Class]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Contract-of-hashcode()-and-equals()-method\",\n    \"title\": \"Contract of hashcode() and equals() method\"\n  }, \"[[Contract of hashcode() and equals() method]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/System-Class\",\n    \"title\": \"System Class\"\n  }, \"[[System Class]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Facilities-provided-by-System-Class\",\n    \"title\": \"Facilities provided by System Class\"\n  }, \"[[Facilities provided by System Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Fields-in-System-Class\",\n    \"title\": \"Fields in System Class\"\n  }, \"[[Fields in System Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-of-System-Class\",\n    \"title\": \"Methods of System Class\"\n  }, \"[[Methods of System Class]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/exit()\",\n    \"title\": \"exit()\"\n  }, \"[[exit()]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/gc()\",\n    \"title\": \"gc()\"\n  }, \"[[gc()]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-System-Properties\",\n    \"title\": \"Java System Properties\"\n  }, \"[[Java System Properties]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Environment-Variable-vs-Java-System-Properties\",\n    \"title\": \"Environment Variable vs Java System Properties\"\n  }, \"[[Environment Variable vs Java System Properties]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/System.out.println()\",\n    \"title\": \"System.out.println()\"\n  }, \"[[System.out.println()]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Marker-Interface-in-Java\",\n    \"title\": \"Marker Interface in Java\"\n  }, \"[[Marker Interface in Java]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"exceptions-and-exception-handling\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Exception\",\n    \"title\": \"Exception\"\n  }, \"[[Exception]]\"), \"s and \", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Exception-Handling\",\n    \"title\": \"Exception Handling\"\n  }, \"[[Exception Handling]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-Keywords-in-Java\",\n    \"title\": \"Exception Handling Keywords in Java\"\n  }, \"[[Exception Handling Keywords in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Exception-Class-Hierarchy\",\n    \"title\": \"Java Exception Class Hierarchy\"\n  }, \"[[Java Exception Class Hierarchy]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Reasons-and-common-scenarios-for-different-types-of-exception-in-Java\",\n    \"title\": \"Reasons and common scenarios for different types of exception in Java\"\n  }, \"[[Reasons and common scenarios for different types of exception in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Custom-Exceptions-in-Java\",\n    \"title\": \"Custom Exceptions in Java\"\n  }, \"[[Custom Exceptions in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Checked-Exceptions-and-Unchecked-Exceptions-in-Java\",\n    \"title\": \"Checked Exceptions and Unchecked Exceptions in Java\"\n  }, \"[[Checked Exceptions and Unchecked Exceptions in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Propagation\",\n    \"title\": \"Exception Propagation\"\n  }, \"[[Exception Propagation]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exceptions-in-main()-method\",\n    \"title\": \"Exceptions in main() method\"\n  }, \"[[Exceptions in main() method]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-with-Method-Overriding\",\n    \"title\": \"Exception Handling with Method Overriding\"\n  }, \"[[Exception Handling with Method Overriding]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"multithreading-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Multithreading-in-Java\",\n    \"title\": \"Multithreading in Java\"\n  }, \"[[Multithreading in Java]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Thread-Life-Cycle\",\n    \"title\": \"Java Thread Life Cycle\"\n  }, \"[[Java Thread Life Cycle]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Thread-Scheduler\",\n    \"title\": \"Thread Scheduler\"\n  }, \"[[Thread Scheduler]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ExecutorService\",\n    \"title\": \"ExecutorService\"\n  }, \"[[ExecutorService]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/How-to-make-method-or-block-of-code-thread-safe\",\n    \"title\": \"How to make method or block of code thread safe\"\n  }, \"[[How to make method or block of code thread safe]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Volatile-and-atomic-keywords\",\n    \"title\": \"Volatile & atomic keywords\"\n  }, \"[[Volatile & atomic keywords]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Deadlock-Detection-in-Java\",\n    \"title\": \"Deadlock Detection in Java\"\n  }, \"[[Deadlock Detection in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Deadlock-Prevention-in-Java\",\n    \"title\": \"Deadlock Prevention in Java\"\n  }, \"[[Deadlock Prevention in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Thread-class\",\n    \"title\": \"Thread class\"\n  }, \"[[Thread class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Runnable-Interface\",\n    \"title\": \"Runnable Interface\"\n  }, \"[[Runnable Interface]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-Useful-for-Multithreading\",\n    \"title\": \"Methods Useful for Multithreading\"\n  }, \"[[Methods Useful for Multithreading]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"collections-framework-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Collections-Framework-in-Java\",\n    \"title\": \"Collections Framework in Java\"\n  }, \"[[Collections Framework in Java]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections\",\n    \"title\": \"Collections\"\n  }, \"[[Collections]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utility Classes: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections-Class\",\n    \"title\": \"Collections Class\"\n  }, \"[[Collections Class]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Arrays-Class\",\n    \"title\": \"Arrays Class\"\n  }, \"[[Arrays Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Size-of-Collection-Objects\",\n    \"title\": \"Size of Collection Objects\"\n  }, \"[[Size of Collection Objects]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collection-Classes-and-Interfaces\",\n    \"title\": \"Collection Classes and Interfaces\"\n  }, \"[[Collection Classes and Interfaces]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Behaviour: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/All-Collection-Classes-implement-Serializable-and-Cloneable\",\n    \"title\": \"All Collection Classes implement Serializable and Cloneable\"\n  }, \"[[All Collection Classes implement Serializable and Cloneable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Heterogeneous-Objects\",\n    \"title\": \"Heterogeneous Objects\"\n  }, \"[[Heterogeneous Objects]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/RandomAccess\",\n    \"title\": \"RandomAccess\"\n  }, \"[[RandomAccess]]\"), \" - link back - don't put here\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Differences:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections-Class\",\n    \"title\": \"Collections Class\"\n  }, \"[[Collections Class]]\"), \" vs \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collection\",\n    \"title\": \"Collection\"\n  }, \"[[Collection]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Array-vs-ArrayList\",\n    \"title\": \"Array vs ArrayList\"\n  }, \"[[Array vs ArrayList]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/HashMap-vs-Hashtable\",\n    \"title\": \"HashMap vs Hashtable\"\n  }, \"[[HashMap vs Hashtable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ArrayList-and-Vector's-only-Difference\",\n    \"title\": \"ArrayList and Vector's only Difference\"\n  }, \"[[ArrayList and Vector's only Difference]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/size()\",\n    \"title\": \"size()\"\n  }, \"[[size()]]\"), \" vs \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/capacity()\",\n    \"title\": \"capacity()\"\n  }, \"[[capacity()]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cursor\",\n    \"title\": \"Cursor\"\n  }, \"[[Cursor]]\"), \"s in Java\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Enumeration\",\n    \"title\": \"Enumeration\"\n  }, \"[[Enumeration]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Iterator\",\n    \"title\": \"Iterator\"\n  }, \"[[Iterator]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ListIterator\",\n    \"title\": \"ListIterator\"\n  }, \"[[ListIterator]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Getting-Objects-of-Cursors-in-Java\",\n    \"title\": \"Getting Objects of Cursors in Java\"\n  }, \"[[Getting Objects of Cursors in Java]]\"), \"\")))), mdx(\"h2\", {\n    \"id\": \"java-language-architecture\"\n  }, \"Java Language Architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JDK\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JVM\",\n    \"title\": \"JVM\"\n  }, \"[[JVM]]\"), \" + Library classes   = \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JRE\",\n    \"title\": \"JRE\"\n  }, \"[[JRE]]\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JRE\",\n    \"title\": \"JRE\"\n  }, \"[[JRE]]\"), \" + Development tools = \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JDK\",\n    \"title\": \"JDK\"\n  }, \"[[JDK]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory Management\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Program-Execution-in-Java\",\n    \"title\": \"Program Execution in Java\"\n  }, \"[[Program Execution in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Types-of-Memory-in-Java\",\n    \"title\": \"Types of Memory in Java\"\n  }, \"[[Types of Memory in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Implicit-Memory-Management\",\n    \"title\": \"Implicit Memory Management\"\n  }, \"[[Implicit Memory Management]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Garbage-Collection\",\n    \"title\": \"Garbage Collection\"\n  }, \"[[Garbage Collection]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Reachable-Object\",\n    \"title\": \"Reachable Object\"\n  }, \"[[Reachable Object]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Root-Object\",\n    \"title\": \"Root Object\"\n  }, \"[[Root Object]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Why-Java-doesn't-have-pointers\",\n    \"title\": \"Why Java doesn't have pointers\"\n  }, \"[[Why Java doesn't have pointers]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Tools-for-Performance-Analysis-in-Java\",\n    \"title\": \"Tools for Performance Analysis in Java\"\n  }, \"[[Tools for Performance Analysis in Java]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"database-access\"\n  }, \"Database Access\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"APIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JPA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JD\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JDBC-Steps\",\n    \"title\": \"JDBC Steps\"\n  }, \"[[JDBC Steps]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/PreparedStatement-for-user-input\",\n    \"title\": \"PreparedStatement for user input\"\n  }, \"[[PreparedStatement for user input]]\"), \"\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ORM:\")), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://warp.povusers.org/grrr/java.html\"\n  }, \"Some(read, lot of) hate for Java\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"594d8a74-4ddd-5c73-bc0e-facb31db76a0","fields":{"slug":"/002 Java MOC","title":"002 Java MOC"}}}]},"fields":{"slug":"/Program Execution in Java","title":"Program Execution in Java"}}},"pageContext":{"id":"82b1a440-92f8-5269-9b8f-a1c7881fe843"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}