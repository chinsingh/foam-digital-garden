{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Fuel Injector","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"fuel-injector\"\n  }, \"Fuel Injector\"), mdx(\"p\", null, \"Injects the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Cylinder\",\n    \"title\": \"Cylinder\"\n  }, \"[[Cylinder]]\"), \" with fuel.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cylinder-engine\"\n  }, \"Cylinder (engine)\"), mdx(\"p\", null, \"A cylinder is where combustion and conversion from this chemical to mechanical energy takes place in an engine.\"), mdx(\"p\", null, \"Cylinder has three main components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Piston\",\n    \"title\": \"Piston\"\n  }, \"[[Piston]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Crank Shaft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Connecting Valve\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"8ef0b686-4a5f-5ff5-97f3-ce0af31ae882","fields":{"slug":"/Cylinder","title":"Cylinder (engine)"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"fuel-delivery-system\"\n  }, \"Fuel Delivery System\"), mdx(\"p\", null, \"This comprisees of all the components responsible for storing to tranmission of fuel to the engine.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Intake Manifold\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Air-Intake-Valve\",\n    \"title\": \"Air Intake Valve\"\n  }, \"[[Air Intake Valve]]\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exhaust-Valve\",\n    \"title\": \"Exhaust Valve\"\n  }, \"[[Exhaust Valve]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Fuel-Injector\",\n    \"title\": \"Fuel Injector\"\n  }, \"[[Fuel Injector]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Spark-Plug\",\n    \"title\": \"Spark Plug\"\n  }, \"[[Spark Plug]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"18d54645-40e8-5c4e-b334-bb32b1e0766d","fields":{"slug":"/Fuel Delivery System","title":"Fuel Delivery System"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"spark-ignition-petrol-engine\"\n  }, \"Spark Ignition (Petrol) Engine\"), mdx(\"p\", null, \"Standard \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Four-Stroke\",\n    \"title\": \"Four Stroke\"\n  }, \"[[Four Stroke]]\"), \" with the following additions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Intake Stroke\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Fuel-Injector\",\n    \"title\": \"Fuel Injector\"\n  }, \"[[Fuel Injector]]\"), \" injects fuel along with the air.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Combustion Stroke\"), \": Spark Ignition uses \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Spark-Plug\",\n    \"title\": \"Spark Plug\"\n  }, \"[[Spark Plug]]\"), \" to trigger combustion in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cylinder\",\n    \"title\": \"Cylinder\"\n  }, \"[[Cylinder]]\"), \", hence the name.\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f47ad966-73b7-5475-a4a4-8dfb3ae8373f","fields":{"slug":"/Spark Ignition (Petrol) Engine","title":"Spark Ignition (Petrol) Engine"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"compression-ignition-diesel-engine\"\n  }, \"Compression Ignition (Diesel) Engine\"), mdx(\"p\", null, \"Standard \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Four-Stroke\",\n    \"title\": \"Four Stroke\"\n  }, \"[[Four Stroke]]\"), \" with the following additions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Compression Stroke\"), \": The air is compressed to such an extent that even contact with fuel will light it up, hence the name.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Combustion Stroke\"), \": Fuel is injected through the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Fuel-Injector\",\n    \"title\": \"Fuel Injector\"\n  }, \"[[Fuel Injector]]\"), \" to trigger combustion in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cylinder\",\n    \"title\": \"Cylinder\"\n  }, \"[[Cylinder]]\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"1562e05e-38c2-505e-8d54-465eea78c811","fields":{"slug":"/Compression Ignition (Diesel) Engine","title":"Compression Ignition (Diesel) Engine"}}}]},"fields":{"slug":"/Fuel Injector","title":"Fuel Injector"}}},"pageContext":{"id":"f785992e-5cf6-5924-abb3-9046c462b024"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}