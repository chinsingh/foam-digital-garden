{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Arrays in Java are Objects","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"arrays-in-java-are-objects\"\n  }, \"Arrays in Java are Objects\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This is why arrays are initialized using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" keyword\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For each array type, there exists a corresponding class.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"So there is a class for int[], for float[], double[] etc.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"These classes are the part of java language and not available to the programmer level\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To know the class of any array\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// Here x is the name of the array.\\nSystem.out.println(x.getClass().getName());\\n\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Corresponding-class-names-for-some-array-types\",\n    \"title\": \"Corresponding class names for some array types\"\n  }, \"[[Corresponding class names for some array types]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Every array type implements \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Serializable\",\n    \"title\": \"Serializable\"\n  }, \"[[Serializable]]\"), \"  and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Cloneable\",\n    \"title\": \"Cloneable\"\n  }, \"[[Cloneable]]\"), \" interface\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Arrays can be assigned to variables of type Object \\u2014 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Upcasting\",\n    \"title\": \"Upcasting\"\n  }, \"[[Upcasting]]\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"All methods of Object class can be invoked on an array\"))), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/array-primitive-type-object-java/\"\n  }, \"Is an array a primitive type or an object in Java? - GeeksforGeeks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html\"\n  }, \"Chapter 10. Arrays - Oracle Docs\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"corresponding-class-names-for-some-array-types\"\n  }, \"Corresponding class names for some array types\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\",\n    \"metastring\": \"text\",\n    \"text\": true\n  }, \"Array typeCorresponding          Class Name\\nint[]                            [I\\nint[][]                          [[I\\ndouble[]                         [D\\ndouble[][]                       [[D\\nshort[]                          [S\\nbyte[]                           [B\\nboolean[]                        [Z\\n\")), mdx(\"p\", null, \"[ for single dimension\\n[[ for two-dimensional\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bbbf04ad-f420-552f-9297-a296c775697d","fields":{"slug":"/Corresponding class names for some array types","title":"Corresponding class names for some array types"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"serializable\"\n  }, \"Serializable\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Marker-interface-in-Java\",\n    \"title\": \"Marker interface in Java\"\n  }, \"[[Marker interface in Java]]\"), \" that allows \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Serialization\",\n    \"title\": \"Serialization\"\n  }, \"[[Serialization]]\"), \" in Java.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bd5a5a62-ee42-56f4-a22b-f1903b1f757f","fields":{"slug":"/Serializable","title":"Serializable"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"clonable\"\n  }, \"Clonable\"), mdx(\"p\", null, \"Its a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Marker-Interface-in-Java\",\n    \"title\": \"Marker Interface in Java\"\n  }, \"[[Marker Interface in Java]]\"), \" allowing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Object-Cloning\",\n    \"title\": \"Object Cloning\"\n  }, \"[[Object Cloning]]\"), \" in Java.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"642ff6d1-a23c-5a32-a303-aa39497eae1d","fields":{"slug":"/Cloneable","title":"Clonable"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"upcasting\"\n  }, \"Upcasting\"), mdx(\"p\", null, \"Casting from subclass to superclass\"), mdx(\"h2\", {\n    \"id\": \"syntax\"\n  }, \"Syntax\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Generally, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Implicit-Casting\",\n    \"title\": \"Implicit Casting\"\n  }, \"[[Implicit Casting]]\"), \". Why?\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"=> Compiler knows that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Cat\"), \" is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Animal.\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Liskov-Substitution-Principle\",\n    \"title\": \"Liskov Substitution Principle\"\n  }, \"[[Liskov Substitution Principle]]\"), \"\"))), mdx(\"h2\", {\n    \"id\": \"what-upcasting-gives-us\"\n  }, \"What upcasting gives us?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Polymorphism\",\n    \"title\": \"Polymorphism\"\n  }, \"[[Polymorphism]]\"), \"\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Instead of using different methods for a common functionality in each of the sub classes, we can have a common method in the superclass for that functionality and all subclass objects will be casted implicitly.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Example - a feed(Animal animal) function to which we can pass objects of Cat and Dog classes \\u2192 feed(cat); feed(dog);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Method-Overriding\",\n    \"title\": \"Method Overriding\"\n  }, \"[[Method Overriding]]\"), \"\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  When an object is upcasted, it still can call overridden methods from its original class.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  For example, if Animal class has an eat() method and subclasses Cat and Dog override it.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  eat(animal) will call the methods from either the class Cat or Dog, whichever it was before upcasting.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Runtime-Polymorphism-or-Dynamic-Method-Dispatch\",\n    \"title\": \"Runtime Polymorphism or Dynamic Method Dispatch\"\n  }, \"[[Runtime Polymorphism or Dynamic Method Dispatch]]\"), \" is a result of Upcasting.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"8a489e2b-968e-5108-881a-143f7d83f8f3","fields":{"slug":"/Upcasting","title":"Upcasting"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"002-java-moc\"\n  }, \"002 Java MOC\"), mdx(\"h2\", {\n    \"id\": \"fundamentals\"\n  }, \"Fundamentals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic Syntax: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/HelloWorld-dot-java\",\n    \"title\": \"HelloWorld dot java\"\n  }, \"[[HelloWorld dot java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Syntax-Rules\",\n    \"title\": \"Java Syntax Rules\"\n  }, \"[[Java Syntax Rules]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Naming-Conventions\",\n    \"title\": \"Java Naming Conventions\"\n  }, \"[[Java Naming Conventions]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Suffixing-for-Non-default-Primitive-Data-Types\",\n    \"title\": \"Suffixing for Non-default Primitive Data Types\"\n  }, \"[[Suffixing for Non-default Primitive Data Types]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Prefixes-for-Different-Bases\",\n    \"title\": \"Prefixes for Different Bases\"\n  }, \"[[Prefixes for Different Bases]]\"), \" |\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Comments-in-Java\",\n    \"title\": \"Comments in Java\"\n  }, \"[[Comments in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[[public static void main(String[] args)]]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data Types: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Primitive-Data-Types-in-Java-and-their-sizes\",\n    \"title\": \"Primitive Data Types in Java and their sizes\"\n  }, \"[[Primitive Data Types in Java and their sizes]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Classes and Objects: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Creating-Objects-in-Java\",\n    \"title\": \"Creating Objects in Java\"\n  }, \"[[Creating Objects in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Using-the-Objects-(through-its-reference-variables)\",\n    \"title\": \"Using the Objects (through its reference variables)\"\n  }, \"[[Using the Objects (through its reference variables)]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Methods: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-is-always-Pass-by-Value\",\n    \"title\": \"Java is always Pass by Value\"\n  }, \"[[Java is always Pass by Value]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"data-types\"\n  }, \"Data Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Structured Types  \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrays: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Defining-Arrays-in-Java\",\n    \"title\": \"Defining Arrays in Java\"\n  }, \"[[Defining Arrays in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Declaring-Arrays-in-Java\",\n    \"title\": \"Declaring Arrays in Java\"\n  }, \"[[Declaring Arrays in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Arrays-in-Java-are-Objects\",\n    \"title\": \"Arrays in Java are Objects\"\n  }, \"[[Arrays in Java are Objects]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String\",\n    \"title\": \"String\"\n  }, \"[[String]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/null-vs-empty-String\",\n    \"title\": \"null vs empty String\"\n  }, \"[[null vs empty String]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Comparison\",\n    \"title\": \"String Comparison\"\n  }, \"[[String Comparison]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Constant-Pool\",\n    \"title\": \"String Constant Pool\"\n  }, \"[[String Constant Pool]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Memory-Management\",\n    \"title\": \"String Memory Management\"\n  }, \"[[String Memory Management]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For mutable Strings: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/StringBuffer\",\n    \"title\": \"StringBuffer\"\n  }, \"[[StringBuffer]]\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/StringBuilder\",\n    \"title\": \"StringBuilder\"\n  }, \"[[StringBuilder]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Wrapper-Classes\",\n    \"title\": \"Wrapper Classes\"\n  }, \"[[Wrapper Classes]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Useful-Methods-of-Wrapper-Classes\",\n    \"title\": \"Useful Methods of Wrapper Classes\"\n  }, \"[[Useful Methods of Wrapper Classes]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Casting\",\n    \"title\": \"Casting\"\n  }, \"[[Casting]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Primitive-Conversion\",\n    \"title\": \"Primitive Conversion\"\n  }, \"[[Primitive Conversion]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Widening-Conversion-in-Java\",\n    \"title\": \"Widening Conversion in Java\"\n  }, \"[[Widening Conversion in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Narrowing-Conversion-in-Java\",\n    \"title\": \"Narrowing Conversion in Java\"\n  }, \"[[Narrowing Conversion in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Boxing-and-Unboxing-conversion\",\n    \"title\": \"Boxing and Unboxing conversion\"\n  }, \"[[Boxing and Unboxing conversion]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/String-Conversion\",\n    \"title\": \"String Conversion\"\n  }, \"[[String Conversion]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Numeric-Promotion\",\n    \"title\": \"Numeric Promotion\"\n  }, \"[[Numeric Promotion]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Type-Conversion\",\n    \"title\": \"Object Type Conversion\"\n  }, \"[[Object Type Conversion]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Upcasting\",\n    \"title\": \"Upcasting\"\n  }, \"[[Upcasting]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Downcasting-in-Java\",\n    \"title\": \"Downcasting in Java\"\n  }, \"[[Downcasting in Java]]\"), \"\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Final\",\n    \"title\": \"Final\"\n  }, \"[[Final]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Final-Member\",\n    \"title\": \"Final Member\"\n  }, \"[[Final Member]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Blank-Final-Variable\",\n    \"title\": \"Blank Final Variable\"\n  }, \"[[Blank Final Variable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Blank-Static-Final-Variable\",\n    \"title\": \"Blank Static Final Variable\"\n  }, \"[[Blank Static Final Variable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Immutable-Class\",\n    \"title\": \"Immutable Class\"\n  }, \"[[Immutable Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums\",\n    \"title\": \"Java Enums\"\n  }, \"[[Java Enums]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Values-of-an-Enum-and-Constructor-of-Java-Enums\",\n    \"title\": \"Values of an Enum and Constructor of Java Enums\"\n  }, \"[[Values of an Enum and Constructor of Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/values()-valuesOf()-ordinal()-Functions-in-Java-Enums\",\n    \"title\": \"values(), valuesOf(), ordinal() Functions in Java Enums\"\n  }, \"[[values(), valuesOf(), ordinal() Functions in Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Internal-Code-Generated-by-Compiler-for-Java-Enums\",\n    \"title\": \"Internal Code Generated by Compiler for Java Enums\"\n  }, \"[[Internal Code Generated by Compiler for Java Enums]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums-in-Switch-statement\",\n    \"title\": \"Java Enums in Switch statement\"\n  }, \"[[Java Enums in Switch statement]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Enums-and-Classes\",\n    \"title\": \"Java Enums and Classes\"\n  }, \"[[Java Enums and Classes]]\"), \"\")))), mdx(\"h2\", {\n    \"id\": \"oop-in-java\"\n  }, \"OOP in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inheritance-in-Java\",\n    \"title\": \"Inheritance in Java\"\n  }, \"[[Inheritance in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inheritance-in-Java-and-default\",\n    \"title\": \"Inheritance in Java and default\"\n  }, \"[[Inheritance in Java and default]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Multiple-Inheritance-not-allowed\",\n    \"title\": \"Multiple Inheritance not allowed\"\n  }, \"[[Multiple Inheritance not allowed]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Encapsulation\",\n    \"title\": \"Encapsulation\"\n  }, \"[[Encapsulation]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/default\",\n    \"title\": \"default\"\n  }, \"[[default]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Covariant-Return-Types\",\n    \"title\": \"Covariant Return Types\"\n  }, \"[[Covariant Return Types]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Static-in-Java\",\n    \"title\": \"Static in Java\"\n  }, \"[[Static in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Static-Blocks\",\n    \"title\": \"Static Blocks\"\n  }, \"[[Static Blocks]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Inner-Class\",\n    \"title\": \"Inner Class\"\n  }, \"[[Inner Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Cloning-in-Java\",\n    \"title\": \"Object Cloning in Java\"\n  }, \"[[Object Cloning in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cloneable\",\n    \"title\": \"Cloneable\"\n  }, \"[[Cloneable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/clone()\",\n    \"title\": \"clone()\"\n  }, \"[[clone()]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Instance-Initializer-Block\",\n    \"title\": \"Instance Initializer Block\"\n  }, \"[[Instance Initializer Block]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-with-Method-Overriding\",\n    \"title\": \"Exception Handling with Method Overriding\"\n  }, \"[[Exception Handling with Method Overriding]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Serialization-in-Java\",\n    \"title\": \"Serialization in Java\"\n  }, \"[[Serialization in Java]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Serializable\",\n    \"title\": \"Serializable\"\n  }, \"[[Serializable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/this-and-super-keyword\",\n    \"title\": \"this and super keyword\"\n  }, \"[[this and super keyword]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"special-classes-in-java\"\n  }, \"Special Classes in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Object-Class\",\n    \"title\": \"Object Class\"\n  }, \"[[Object Class]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-of-Object-Class\",\n    \"title\": \"Methods of Object Class\"\n  }, \"[[Methods of Object Class]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Contract-of-hashcode()-and-equals()-method\",\n    \"title\": \"Contract of hashcode() and equals() method\"\n  }, \"[[Contract of hashcode() and equals() method]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/System-Class\",\n    \"title\": \"System Class\"\n  }, \"[[System Class]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Facilities-provided-by-System-Class\",\n    \"title\": \"Facilities provided by System Class\"\n  }, \"[[Facilities provided by System Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Fields-in-System-Class\",\n    \"title\": \"Fields in System Class\"\n  }, \"[[Fields in System Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-of-System-Class\",\n    \"title\": \"Methods of System Class\"\n  }, \"[[Methods of System Class]]\"), \": \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/exit()\",\n    \"title\": \"exit()\"\n  }, \"[[exit()]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/gc()\",\n    \"title\": \"gc()\"\n  }, \"[[gc()]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-System-Properties\",\n    \"title\": \"Java System Properties\"\n  }, \"[[Java System Properties]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Environment-Variable-vs-Java-System-Properties\",\n    \"title\": \"Environment Variable vs Java System Properties\"\n  }, \"[[Environment Variable vs Java System Properties]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/System.out.println()\",\n    \"title\": \"System.out.println()\"\n  }, \"[[System.out.println()]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Marker-Interface-in-Java\",\n    \"title\": \"Marker Interface in Java\"\n  }, \"[[Marker Interface in Java]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"exceptions-and-exception-handling\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Exception\",\n    \"title\": \"Exception\"\n  }, \"[[Exception]]\"), \"s and \", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Exception-Handling\",\n    \"title\": \"Exception Handling\"\n  }, \"[[Exception Handling]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-Keywords-in-Java\",\n    \"title\": \"Exception Handling Keywords in Java\"\n  }, \"[[Exception Handling Keywords in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Exception-Class-Hierarchy\",\n    \"title\": \"Java Exception Class Hierarchy\"\n  }, \"[[Java Exception Class Hierarchy]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Reasons-and-common-scenarios-for-different-types-of-exception-in-Java\",\n    \"title\": \"Reasons and common scenarios for different types of exception in Java\"\n  }, \"[[Reasons and common scenarios for different types of exception in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Custom-Exceptions-in-Java\",\n    \"title\": \"Custom Exceptions in Java\"\n  }, \"[[Custom Exceptions in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Checked-Exceptions-and-Unchecked-Exceptions-in-Java\",\n    \"title\": \"Checked Exceptions and Unchecked Exceptions in Java\"\n  }, \"[[Checked Exceptions and Unchecked Exceptions in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Propagation\",\n    \"title\": \"Exception Propagation\"\n  }, \"[[Exception Propagation]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exceptions-in-main()-method\",\n    \"title\": \"Exceptions in main() method\"\n  }, \"[[Exceptions in main() method]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Exception-Handling-with-Method-Overriding\",\n    \"title\": \"Exception Handling with Method Overriding\"\n  }, \"[[Exception Handling with Method Overriding]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"multithreading-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Multithreading-in-Java\",\n    \"title\": \"Multithreading in Java\"\n  }, \"[[Multithreading in Java]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Java-Thread-Life-Cycle\",\n    \"title\": \"Java Thread Life Cycle\"\n  }, \"[[Java Thread Life Cycle]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Thread-Scheduler\",\n    \"title\": \"Thread Scheduler\"\n  }, \"[[Thread Scheduler]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ExecutorService\",\n    \"title\": \"ExecutorService\"\n  }, \"[[ExecutorService]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/How-to-make-method-or-block-of-code-thread-safe\",\n    \"title\": \"How to make method or block of code thread safe\"\n  }, \"[[How to make method or block of code thread safe]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Volatile-and-atomic-keywords\",\n    \"title\": \"Volatile & atomic keywords\"\n  }, \"[[Volatile & atomic keywords]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Deadlock-Detection-in-Java\",\n    \"title\": \"Deadlock Detection in Java\"\n  }, \"[[Deadlock Detection in Java]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Deadlock-Prevention-in-Java\",\n    \"title\": \"Deadlock Prevention in Java\"\n  }, \"[[Deadlock Prevention in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Thread-class\",\n    \"title\": \"Thread class\"\n  }, \"[[Thread class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Runnable-Interface\",\n    \"title\": \"Runnable Interface\"\n  }, \"[[Runnable Interface]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Methods-Useful-for-Multithreading\",\n    \"title\": \"Methods Useful for Multithreading\"\n  }, \"[[Methods Useful for Multithreading]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"collections-framework-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Collections-Framework-in-Java\",\n    \"title\": \"Collections Framework in Java\"\n  }, \"[[Collections Framework in Java]]\"), \"\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections\",\n    \"title\": \"Collections\"\n  }, \"[[Collections]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Utility Classes: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections-Class\",\n    \"title\": \"Collections Class\"\n  }, \"[[Collections Class]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Arrays-Class\",\n    \"title\": \"Arrays Class\"\n  }, \"[[Arrays Class]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Size-of-Collection-Objects\",\n    \"title\": \"Size of Collection Objects\"\n  }, \"[[Size of Collection Objects]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collection-Classes-and-Interfaces\",\n    \"title\": \"Collection Classes and Interfaces\"\n  }, \"[[Collection Classes and Interfaces]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Behaviour: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/All-Collection-Classes-implement-Serializable-and-Cloneable\",\n    \"title\": \"All Collection Classes implement Serializable and Cloneable\"\n  }, \"[[All Collection Classes implement Serializable and Cloneable]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Heterogeneous-Objects\",\n    \"title\": \"Heterogeneous Objects\"\n  }, \"[[Heterogeneous Objects]]\"), \" | \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/RandomAccess\",\n    \"title\": \"RandomAccess\"\n  }, \"[[RandomAccess]]\"), \" - link back - don't put here\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Differences:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collections-Class\",\n    \"title\": \"Collections Class\"\n  }, \"[[Collections Class]]\"), \" vs \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Collection\",\n    \"title\": \"Collection\"\n  }, \"[[Collection]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Array-vs-ArrayList\",\n    \"title\": \"Array vs ArrayList\"\n  }, \"[[Array vs ArrayList]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/HashMap-vs-Hashtable\",\n    \"title\": \"HashMap vs Hashtable\"\n  }, \"[[HashMap vs Hashtable]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ArrayList-and-Vector's-only-Difference\",\n    \"title\": \"ArrayList and Vector's only Difference\"\n  }, \"[[ArrayList and Vector's only Difference]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/size()\",\n    \"title\": \"size()\"\n  }, \"[[size()]]\"), \" vs \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/capacity()\",\n    \"title\": \"capacity()\"\n  }, \"[[capacity()]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cursor\",\n    \"title\": \"Cursor\"\n  }, \"[[Cursor]]\"), \"s in Java\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Enumeration\",\n    \"title\": \"Enumeration\"\n  }, \"[[Enumeration]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Iterator\",\n    \"title\": \"Iterator\"\n  }, \"[[Iterator]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/ListIterator\",\n    \"title\": \"ListIterator\"\n  }, \"[[ListIterator]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Getting-Objects-of-Cursors-in-Java\",\n    \"title\": \"Getting Objects of Cursors in Java\"\n  }, \"[[Getting Objects of Cursors in Java]]\"), \"\")))), mdx(\"h2\", {\n    \"id\": \"java-language-architecture\"\n  }, \"Java Language Architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JDK\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JVM\",\n    \"title\": \"JVM\"\n  }, \"[[JVM]]\"), \" + Library classes   = \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JRE\",\n    \"title\": \"JRE\"\n  }, \"[[JRE]]\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JRE\",\n    \"title\": \"JRE\"\n  }, \"[[JRE]]\"), \" + Development tools = \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JDK\",\n    \"title\": \"JDK\"\n  }, \"[[JDK]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memory Management\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Program-Execution-in-Java\",\n    \"title\": \"Program Execution in Java\"\n  }, \"[[Program Execution in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Types-of-Memory-in-Java\",\n    \"title\": \"Types of Memory in Java\"\n  }, \"[[Types of Memory in Java]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Implicit-Memory-Management\",\n    \"title\": \"Implicit Memory Management\"\n  }, \"[[Implicit Memory Management]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Garbage-Collection\",\n    \"title\": \"Garbage Collection\"\n  }, \"[[Garbage Collection]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Reachable-Object\",\n    \"title\": \"Reachable Object\"\n  }, \"[[Reachable Object]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Root-Object\",\n    \"title\": \"Root Object\"\n  }, \"[[Root Object]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Why-Java-doesn't-have-pointers\",\n    \"title\": \"Why Java doesn't have pointers\"\n  }, \"[[Why Java doesn't have pointers]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Tools-for-Performance-Analysis-in-Java\",\n    \"title\": \"Tools for Performance Analysis in Java\"\n  }, \"[[Tools for Performance Analysis in Java]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"database-access\"\n  }, \"Database Access\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"APIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JPA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JD\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JDBC-Steps\",\n    \"title\": \"JDBC Steps\"\n  }, \"[[JDBC Steps]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/PreparedStatement-for-user-input\",\n    \"title\": \"PreparedStatement for user input\"\n  }, \"[[PreparedStatement for user input]]\"), \"\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ORM:\")), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://warp.povusers.org/grrr/java.html\"\n  }, \"Some(read, lot of) hate for Java\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"594d8a74-4ddd-5c73-bc0e-facb31db76a0","fields":{"slug":"/002 Java MOC","title":"002 Java MOC"}}}]},"fields":{"slug":"/Arrays in Java are Objects","title":"Arrays in Java are Objects"}}},"pageContext":{"id":"fede126b-4dfb-5cea-9294-f629633e8cc7"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}