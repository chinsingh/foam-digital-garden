{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Pseudo comments in ABAP","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"pseudo-comments-in-abap\"\n  }, \"Pseudo comments in ABAP\"), mdx(\"p\", null, \"Pseudo comments are used to provide information to check and test procedures.\"), mdx(\"p\", null, \"For example, you can ignore a certain ATC check using pseudo comments.\"), mdx(\"p\", null, \"Pseudo comments are mostly obsolete though and are being replaced by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Pragmas-in-ABAP\",\n    \"title\": \"Pragmas in ABAP\"\n  }, \"[[Pragmas in ABAP]]\"), \".\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-abap\"\n  }, \"METHOD get_sources.\\n     SELECT source, textlong\\n       INTO TABLE @rt_source\\n       FROM tb006\\n       WHERE spras = @sy-langu. \\\"#EC CI_SUBRC\\nENDMETHOD.\\n\")), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blogs.sap.com/2019/09/11/what-are-pragmas-and-pseudo-comments-in-abap/\"\n  }, \"What are pragmas and pseudo comments in ABAP - SAP blogs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://abapblog.com/articles/tips/124-atc-pseudo-comments-list\"\n  }, \"ATC Pseudo comments list\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"pragmas-in-abap\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"/Pragma\",\n    \"title\": \"Pragma\"\n  }, \"[[Pragma]]\"), \"s in ABAP\"), mdx(\"p\", null, \"Similar to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Pseudo-comments-in-ABAP\",\n    \"title\": \"Pseudo comments in ABAP\"\n  }, \"[[Pseudo comments in ABAP]]\"), \", these are program \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/directive\",\n    \"title\": \"directive\"\n  }, \"[[directive]]\"), \"s used to hide/ignore warnings from check tools inlcuding ABAP compiler syntax check and extended program check.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-abap\"\n  }, \"MESSAGE e001(ad) INTO DATA(lv_message) ##NEEDED.\\n\")), mdx(\"p\", null, \"Tells the check tools that even though the variable lv_message isn\\u2019t used for further processing, the variable is still needed. In this specific scenario, it is needed since we want to be able to perform a where-used search for the message AD 001 from transaction SE91.\"), mdx(\"h2\", {\n    \"id\": \"syntax\"\n  }, \"Syntax\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pragmas are placed before the period\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple pragmas, if required, can be placed one after other seperated by space.\")), mdx(\"p\", null, \"To find mapping between Pseudo comments and pragmas - run  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ABAP_SLIN_PRAGMAS\"), \" or open the table \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SLIN_DESC\"), \" in SE16.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blogs.sap.com/2019/09/11/what-are-pragmas-and-pseudo-comments-in-abap/\"\n  }, \"What are pragmas and pseudo comments in ABAP - SAP blogs\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"311ffe4c-3e4d-52c4-9d49-a8df77552cc2","fields":{"slug":"/Pragmas in ABAP","title":"[[Pragma]]s in ABAP"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"abap\"\n  }, \"ABAP\"), mdx(\"p\", null, \"Advanced Business Application Programming Language\"), mdx(\"h2\", {\n    \"id\": \"funda-mentals\"\n  }, \"Funda mentals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/ABAP_4\",\n    \"title\": \"ABAP_4\"\n  }, \"[[ABAP_4]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Evolution-of-ABAP\",\n    \"title\": \"Evolution of ABAP\"\n  }, \"[[Evolution of ABAP]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Basic-ABAP-Syntax\",\n    \"title\": \"Basic ABAP Syntax\"\n  }, \"[[Basic ABAP Syntax]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Customer-Namespace-in-SAP\",\n    \"title\": \"Customer Namespace in SAP\"\n  }, \"[[Customer Namespace in SAP]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Pseudo-comments-in-ABAP\",\n    \"title\": \"Pseudo comments in ABAP\"\n  }, \"[[Pseudo comments in ABAP]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Pragmas-in-ABAP\",\n    \"title\": \"Pragmas in ABAP\"\n  }, \"[[Pragmas in ABAP]]\"), \"\"))), mdx(\"h2\", {\n    \"id\": \"abap-dictionary\"\n  }, \"ABAP Dictionary\"), mdx(\"h2\", {\n    \"id\": \"abap-workbench\"\n  }, \"ABAP Workbench\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"5fa5be3d-3df3-518d-b835-9c40231f0fd4","fields":{"slug":"/004 ABAP MOC","title":"ABAP"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"pragmas-in-abap\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"/Pragma\",\n    \"title\": \"Pragma\"\n  }, \"[[Pragma]]\"), \"s in ABAP\"), mdx(\"p\", null, \"Similar to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Pseudo-comments-in-ABAP\",\n    \"title\": \"Pseudo comments in ABAP\"\n  }, \"[[Pseudo comments in ABAP]]\"), \", these are program \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/directive\",\n    \"title\": \"directive\"\n  }, \"[[directive]]\"), \"s used to hide/ignore warnings from check tools inlcuding ABAP compiler syntax check and extended program check.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-abap\"\n  }, \"MESSAGE e001(ad) INTO DATA(lv_message) ##NEEDED.\\n\")), mdx(\"p\", null, \"Tells the check tools that even though the variable lv_message isn\\u2019t used for further processing, the variable is still needed. In this specific scenario, it is needed since we want to be able to perform a where-used search for the message AD 001 from transaction SE91.\"), mdx(\"h2\", {\n    \"id\": \"syntax\"\n  }, \"Syntax\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pragmas are placed before the period\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple pragmas, if required, can be placed one after other seperated by space.\")), mdx(\"p\", null, \"To find mapping between Pseudo comments and pragmas - run  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ABAP_SLIN_PRAGMAS\"), \" or open the table \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SLIN_DESC\"), \" in SE16.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blogs.sap.com/2019/09/11/what-are-pragmas-and-pseudo-comments-in-abap/\"\n  }, \"What are pragmas and pseudo comments in ABAP - SAP blogs\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"311ffe4c-3e4d-52c4-9d49-a8df77552cc2","fields":{"slug":"/Pragmas in ABAP","title":"[[Pragma]]s in ABAP"}}}]},"fields":{"slug":"/Pseudo comments in ABAP","title":"Pseudo comments in ABAP"}}},"pageContext":{"id":"ee450ab1-d45b-55ca-ae21-b9d4fd0be10e"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}