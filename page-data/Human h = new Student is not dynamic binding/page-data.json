{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Human h = new Student is not dynamic binding","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"human-h--new-student-is-not-dynamic-binding\"\n  }, \"Human h = new Student is not dynamic binding\"), mdx(\"p\", null, \"Someone could very easily make an argument that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Human h = new Student()\"), \" is not \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Dynamic-Binding\",\n    \"title\": \"Dynamic Binding\"\n  }, \"[[Dynamic Binding]]\"), \"\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"class Human{\\n    foo(){}\\n}\\n\\nclass Student extends Human{\\n    foo(){}\\n    xyz(){}\\n}\\n\\nmain(){\\n    Human h = new Student();\\n    \\n    h.xyz(); //This line will give error. \\n    h.foo(); \\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"why-it-looks-like-its-not-runtime-polymorphism\"\n  }, \"Why it looks like its not runtime polymorphism\"), mdx(\"p\", null, \"The line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h.xyz()\"), \" will immediately show an error.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h.xyz()\"), \"  shows error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u21D2 Program doesn't know h is an object of class Student\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u21D2 h is an object of Human type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u21D2 Its not runtime polymorphism\")), mdx(\"h2\", {\n    \"id\": \"what-actually-happens\"\n  }, \"What actually happens\"), mdx(\"p\", null, \"Compiler doesn't know at compile time that 'h' is an object of Student type.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object type determined at runtime\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u21D2 Compiler still thinks 'h' is an object of Human type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u21D2 COMPILE TIME Error.\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dynamic-binding\"\n  }, \"Dynamic Binding\"), mdx(\"p\", null, \"When the type of object is determined at runtime.\"), mdx(\"p\", null, \"Happens when object of child is assigned to reference of parent.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Human h = new Student()\\n//Student IS-A Human\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"foo(Human h) //method definition\\n\\n//method call\\nfoo(Student s)\\n\")), mdx(\"p\", null, \"Reference of Human type \\u2014\\u2014\\u2014\\u2014>       Object of Student type.\"), mdx(\"p\", null, \"(Reference Variable) ------------------>                                           (Object)\"), mdx(\"p\", null, \"Argument \\u2014  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Human-h-new-Student-is-not-dynamic-binding\",\n    \"title\": \"Human h = new Student is not dynamic binding\"\n  }, \"[[Human h = new Student is not dynamic binding]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"325a668f-faf6-56ad-bfe6-5c89d48c1f07","fields":{"slug":"/Dynamic Binding","title":"Dynamic Binding"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dynamic-binding\"\n  }, \"Dynamic Binding\"), mdx(\"p\", null, \"When the type of object is determined at runtime.\"), mdx(\"p\", null, \"Happens when object of child is assigned to reference of parent.\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Human h = new Student()\\n//Student IS-A Human\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"foo(Human h) //method definition\\n\\n//method call\\nfoo(Student s)\\n\")), mdx(\"p\", null, \"Reference of Human type \\u2014\\u2014\\u2014\\u2014>       Object of Student type.\"), mdx(\"p\", null, \"(Reference Variable) ------------------>                                           (Object)\"), mdx(\"p\", null, \"Argument \\u2014  \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Human-h-new-Student-is-not-dynamic-binding\",\n    \"title\": \"Human h = new Student is not dynamic binding\"\n  }, \"[[Human h = new Student is not dynamic binding]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"325a668f-faf6-56ad-bfe6-5c89d48c1f07","fields":{"slug":"/Dynamic Binding","title":"Dynamic Binding"}}}]},"fields":{"slug":"/Human h = new Student is not dynamic binding","title":"Human h = new Student is not dynamic binding"}}},"pageContext":{"id":"7201b466-4e66-54af-b1bd-db65e7f148b5"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}