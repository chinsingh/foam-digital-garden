{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Class (method) area","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"class-method-area\"\n  }, \"Class (method) area\"), mdx(\"p\", null, \"Stores class level data of every class such as the runtime constant pool, field and method data, the code for methods.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"program-execution-in-java\"\n  }, \"Program Execution in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loading classes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-loader\",\n    \"title\": \"Class loader\"\n  }, \"[[Class loader]]\"), \" loads the class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The constants, static components, method code etc. is loaded in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-(method)-area\",\n    \"title\": \"Class (method) area\"\n  }, \"[[Class (method) area]]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Program-Counter-Register\",\n    \"title\": \"Program Counter Register\"\n  }, \"[[Program Counter Register]]\"), \" is pointed to the first line\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Memory-Allocation-for-new-objects\",\n    \"title\": \"Memory Allocation for new objects\"\n  }, \"[[Memory Allocation for new objects]]\"), \" is done in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Heap-Space\",\n    \"title\": \"Heap Space\"\n  }, \"[[Heap Space]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"method-call-and-execution\"\n  }, \"Method Call and execution\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Private JVM Stack in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Stack-Memory\",\n    \"title\": \"Stack Memory\"\n  }, \"[[Stack Memory]]\"), \" is created\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Java-is-always-Pass-by-Value\",\n    \"title\": \"Java is always Pass by Value\"\n  }, \"[[Java is always Pass by Value]]\"), \"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"New frame is created and stored in the stack\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Frame destroyed when method invocation completes\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"A new one will be created again when the method is invoked.\\n\")))), mdx(\"h2\", {\n    \"id\": \"array-initialization\"\n  }, \"Array initialization\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Single-dimensional arrays\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  A contiguous space is allocated in heap and a reference is returned (similar to new object).\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"library/attachments/2022-07-29-16-00-30.png\",\n    \"alt\": \"array object in java\"\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Two-dimensional arrays\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They don't really exist.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2D arrays are just array of arrays.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multi-dimensional arrays go by the same rule.\")))), mdx(\"h2\", {\n    \"id\": \"string-memory-management\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/String-Memory-Management\",\n    \"title\": \"String Memory Management\"\n  }, \"[[String Memory Management]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"82b1a440-92f8-5269-9b8f-a1c7881fe843","fields":{"slug":"/Program Execution in Java","title":"Program Execution in Java"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"types-of-memory-in-java\"\n  }, \"Types of Memory in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-loader\",\n    \"title\": \"Class loader\"\n  }, \"[[Class loader]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Class-(method)-area\",\n    \"title\": \"Class (method) area\"\n  }, \"[[Class (method) area]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Heap-Space\",\n    \"title\": \"Heap Space\"\n  }, \"[[Heap Space]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Stack-Memory\",\n    \"title\": \"Stack Memory\"\n  }, \"[[Stack Memory]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Program-Counter-Register\",\n    \"title\": \"Program Counter Register\"\n  }, \"[[Program Counter Register]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Native-Memory-Stack\",\n    \"title\": \"Native Memory Stack\"\n  }, \"[[Native Memory Stack]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"b47d7b9d-2503-5f88-b7ba-962430f850d7","fields":{"slug":"/Types of Memory in Java","title":"Types of Memory in Java"}}}]},"fields":{"slug":"/Class (method) area","title":"Class (method) area"}}},"pageContext":{"id":"f4a7eebf-45ac-54f8-97b5-79506ded7434"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}