{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/Class Cast Exception","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"class-cast-exception\"\n  }, \"Class Cast Exception\"), mdx(\"p\", null, \"An exception occurs when a class which is not the superclass or which was not originally the superclass is casted.\"), mdx(\"p\", null, \"For example, if Dog is casted to Cat. Or if Dog is upcasted to Animal and we try casting that Animal object to Cat.\"), mdx(\"p\", null, \"It is advised to determine if the class you're downcasting is an instance of the class you're downcasting to.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"downcasting\"\n  }, \"Downcasting\"), mdx(\"p\", null, \"Casting from superclass to subclass\"), mdx(\"h2\", {\n    \"id\": \"syntax\"\n  }, \"Syntax\"), mdx(\"p\", null, \"Generally, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Explicit-Casting\",\n    \"title\": \"Explicit Casting\"\n  }, \"[[Explicit Casting]]\"), \" and same as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Narrowing-Conversion\",\n    \"title\": \"Narrowing Conversion\"\n  }, \"[[Narrowing Conversion]]\"), \" of primitive types.\"), mdx(\"p\", null, \"Beware of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Class-Cast-Exception\",\n    \"title\": \"Class Cast Exception\"\n  }, \"[[Class Cast Exception]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"19bd77ea-c764-58cf-b1ae-79e0ebfd300a","fields":{"slug":"/Downcasting","title":"Downcasting"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"downcasting-in-java\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"/Downcasting\",\n    \"title\": \"Downcasting\"\n  }, \"[[Downcasting]]\"), \" in Java\"), mdx(\"h2\", {\n    \"id\": \"syntax\"\n  }, \"Syntax\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Same as narrowing conversion in primitive data types\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"float a = 10.5;\\nint b = (int) a;\\n\\nprint(a) -\\u2192 10.5\\nprint(b) -\\u2192 10\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Another way\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Animal animal = new Animal();\\nif (Cat.class.isInstance(animal)) {\\nCat cat = Cat.class.cast(animal);\\n\")))), mdx(\"h2\", {\n    \"id\": \"class-cast-exception--classcastexception\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"/Class-Cast-Exception\",\n    \"title\": \"Class Cast Exception\"\n  }, \"[[Class Cast Exception]]\"), \" \\u2014 ClassCastException\"), mdx(\"p\", null, \"That is why it is advised to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"instanceOf\"), \" check before downcasting.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"instanceOf\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"  Used to avoid the ClassCastException by checking if the object belongs to a certain type\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"//Example \\nif (animal instanceof Cat) {\\n    ((Cat) animal).meow();\\n}\\n\\n\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"//case 1\\nDog dog = new Dog();\\nAnimal animal = dog;\\n\\nif(Cat.class.instanceOf(animal)) -\\u2192 false\\n\\n//case 2\\nCat cat = new Cat();\\nAnimal animal = cat;\\n\\ncat.meow();\\n\\nCat.class.instanceOf(animal) -\\u2192 true\\n\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"54e32514-c4c9-5011-a72a-88d5a44e4de0","fields":{"slug":"/Downcasting in Java","title":"[[Downcasting]] in Java"}}}]},"fields":{"slug":"/Class Cast Exception","title":"Class Cast Exception"}}},"pageContext":{"id":"771639d5-87fe-5424-acc2-84e40eb3224d"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}